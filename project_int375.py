# -*- coding: utf-8 -*-
"""PROJECT_INT375.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oBKCchtuqMB6Lo87dfdwZaxajiLm32Nb
"""

import pandas as pd

df = pd.read_csv('/content/station_day.csv')
df.head()

df.info()

df.describe()

df.isnull().sum()

num_cols = ['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene', 'AQI']
df[num_cols] = df[num_cols].fillna(df[num_cols].median())

df['AQI_Bucket'] = df['AQI_Bucket'].fillna(df['AQI_Bucket'].mode()[0])

df.isnull().sum()

df.describe()

import matplotlib.pyplot as plt
import seaborn as sns

df.hist(figsize=(15, 10), bins=30, color='skyblue', edgecolor='black')
plt.show()

df_numeric = df.select_dtypes(include=['number'])

plt.figure(figsize=(12, 6))
sns.heatmap(df_numeric.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Matrix of Air Pollutants and AQI")
plt.show()

df['Date'] = pd.to_datetime(df['Date'])

plt.figure(figsize=(12, 5))
sns.lineplot(x='Date', y='AQI', data=df, color="blue")
plt.xlabel("Date")
plt.ylabel("AQI")
plt.title("AQI Trends Over Time")
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df["AQI"], bins=50, kde=True, color='blue')
plt.title("Distribution of AQI Values")
plt.xlabel("AQI")
plt.ylabel("Frequency")
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x=df["AQI_Bucket"], order=df["AQI_Bucket"].value_counts().index, palette="coolwarm")
plt.title("AQI Category Distribution")
plt.xlabel("AQI Category")
plt.ylabel("Count")
plt.xticks(rotation=45)
plt.show()

df["Date"] = pd.to_datetime(df["Date"])
df["Month"] = df["Date"].dt.month

monthly_aqi = df.groupby("Month")["AQI"].mean()

plt.figure(figsize=(10, 6))
sns.lineplot(x=monthly_aqi.index, y=monthly_aqi.values, marker="o", color="red")
plt.title("Average AQI Trend Across Months")
plt.xlabel("Month")
plt.ylabel("Average AQI")
plt.xticks(range(1, 13), ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
plt.grid()
plt.show()

pollutants = ["PM2.5", "PM10", "NO2", "CO", "O3", "SO2"]

plt.figure(figsize=(15, 10))
for i, pollutant in enumerate(pollutants, 1):
    plt.subplot(2, 3, i)
    sns.scatterplot(x=df[pollutant], y=df["AQI"], alpha=0.5)
    plt.title(f"AQI vs {pollutant}")
    plt.xlabel(pollutant)
    plt.ylabel("AQI")

plt.tight_layout()
plt.show()

numeric_df = df.select_dtypes(include=['number'])

plt.figure(figsize=(12, 6))
sns.heatmap(numeric_df.corr(), annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Matrix of Air Pollutants and AQI")
plt.show()

df.isnull().sum()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df["AQI_Bucket"] = le.fit_transform(df["AQI_Bucket"])

df["AQI_Bucket"].unique()

df.drop(["StationId", "Date"], axis=1, inplace=True)

X = df.drop(["AQI"], axis=1)
y = df["AQI"]

X.shape, y.shape

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

rf_model.fit(X_train, y_train)

print("‚úÖ Random Forest model trained successfully!")

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

y_pred = rf_model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"üìå Mean Absolute Error (MAE): {mae}")
print(f"üìå Root Mean Squared Error (RMSE): {rmse}")
print(f"üìå R¬≤ Score: {r2}")

import matplotlib.pyplot as plt
import seaborn as sns

feature_importance = rf_model.feature_importances_

feat_imp_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})
feat_imp_df = feat_imp_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(12, 6))
sns.barplot(x='Importance', y='Feature', data=feat_imp_df, palette='coolwarm')
plt.title("üîç Feature Importance for AQI Prediction")
plt.xlabel("Importance Score")
plt.ylabel("Features")
plt.show()

import joblib

joblib.dump(rf_model, "AQI_Prediction_Model.pkl")

print("‚úÖ Model saved as AQI_Prediction_Model.pkl")

import joblib
rf_model_loaded = joblib.load("AQI_Prediction_Model.pkl")

print(rf_model_loaded.feature_names_in_)

import pandas as pd

sample_data = [[70, 120, 2, 25, 15, 10, 0.1, 12, 130, 0.2, 7, 0.1, 'Moderate', 3]]
sample_df = pd.DataFrame(sample_data, columns=rf_model_loaded.feature_names_in_)

sample_df['AQI_Bucket'] = sample_df['AQI_Bucket'].astype('category').cat.codes

predicted_aqi = rf_model_loaded.predict(sample_df)
print(f"üîç Predicted AQI: {predicted_aqi[0]}")

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from scipy.stats import randint
import numpy as np
import pandas as pd

X_sample = X_train.sample(frac=0.2, random_state=42)
y_sample = y_train.loc[X_sample.index]

param_dist = {
    'n_estimators': randint(100, 300),
    'max_depth': [10, 20, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

random_search = RandomizedSearchCV(
    estimator=RandomForestRegressor(random_state=42),
    param_distributions=param_dist,
    n_iter=15,
    cv=3,
    n_jobs=-1,
    scoring='r2',
    verbose=1,
    random_state=42
)

random_search.fit(X_sample, y_sample)

best_rf_model = random_search.best_estimator_
y_pred = best_rf_model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print("‚úÖ Hyperparameter Tuning Completed!")
print("üîç Best Parameters:", random_search.best_params_)
print(f"üìå MAE: {mae}")
print(f"üìå RMSE: {rmse}")
print(f"üìå R¬≤ Score: {r2}")

import joblib

joblib.dump(best_rf_model, "Best_AQI_Model.pkl")
print("‚úÖ Tuned Random Forest model saved as 'Best_AQI_Model.pkl'")

loaded_model = joblib.load("Best_AQI_Model.pkl")
print("‚úÖ Model loaded successfully!")

sample_input = [[70, 120, 2, 25, 15, 10, 0.1, 12, 130, 0.2, 7, 0.1, 2, 3]]

feature_names = loaded_model.feature_names_in_
sample_df = pd.DataFrame(sample_input, columns=feature_names)

predicted_aqi = loaded_model.predict(sample_df)
print(f"üîÆ Predicted AQI: {predicted_aqi[0]}")

!pip install xgboost

from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

xgb_model = XGBRegressor(
    n_estimators=150,
    max_depth=6,
    learning_rate=0.1,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)

xgb_model.fit(X_train, y_train)

xgb_pred = xgb_model.predict(X_test)

mae_xgb = mean_absolute_error(y_test, xgb_pred)
rmse_xgb = np.sqrt(mean_squared_error(y_test, xgb_pred))
r2_xgb = r2_score(y_test, xgb_pred)

print("‚úÖ XGBoost Model Evaluation:")
print(f"üìå MAE: {mae_xgb}")
print(f"üìå RMSE: {rmse_xgb}")
print(f"üìå R¬≤ Score: {r2_xgb}")

"""Although both Random Forest and XGBoost provided high accuracy for AQI prediction, XGBoost demonstrated marginally better performance with a lower RMSE and a higher R¬≤ score, making it the preferred model for deployment."""

import joblib
joblib.dump(xgb_model, "Best_XGBoost_AQI_Model.pkl")
print("‚úÖ XGBoost model saved as 'Best_XGBoost_AQI_Model.pkl'")

rf_pred = best_rf_model.predict(X_test)
xgb_pred = xgb_model.predict(X_test)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))

sns.lineplot(x=range(100), y=y_test[:100].values, label="Actual AQI", color="black", linewidth=2)
sns.lineplot(x=range(100), y=rf_pred[:100], label="Predicted AQI - Random Forest", color="green", linestyle="--")

sns.lineplot(x=range(100), y=xgb_pred[:100], label="Predicted AQI - XGBoost", color="blue", linestyle=":")

plt.xlabel("Sample Index")
plt.ylabel("AQI")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
sns.scatterplot(x=y_test, y=rf_pred, alpha=0.5, color='green')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual AQI")
plt.ylabel("Predicted AQI")
plt.title("Random Forest: Actual vs Predicted")

plt.subplot(1, 2, 2)
sns.scatterplot(x=y_test, y=xgb_pred, alpha=0.5, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual AQI")
plt.ylabel("Predicted AQI")
plt.title("XGBoost: Actual vs Predicted")

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

metrics = ['MAE', 'RMSE', 'R2 Score']
rf_scores = [mae, rmse, r2]
xgb_scores = [mae_xgb, rmse_xgb, r2_xgb]

x = np.arange(len(metrics))
width = 0.35

plt.figure(figsize=(10, 6))
plt.bar(x - width/2, rf_scores, width, label='Random Forest', color='green')
plt.bar(x + width/2, xgb_scores, width, label='XGBoost', color='blue')

plt.xticks(x, metrics)
plt.ylabel("Score")
plt.title("Comparison of Model Evaluation Metrics")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

rf_residuals = y_test - rf_pred
xgb_residuals = y_test - xgb_pred

plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
sns.histplot(rf_residuals, bins=30, kde=True, color='green')
plt.title("Random Forest Residuals")

plt.subplot(1, 2, 2)
sns.histplot(xgb_residuals, bins=30, kde=True, color='blue')
plt.title("XGBoost Residuals")

plt.tight_layout()
plt.show()

rf_importance = pd.Series(best_rf_model.feature_importances_, index=X_train.columns)
xgb_importance = pd.Series(xgb_model.feature_importances_, index=X_train.columns)

plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
rf_importance.sort_values(ascending=False).plot(kind='bar', color='green')
plt.title("Random Forest Feature Importance")
plt.ylabel("Importance Score")

plt.subplot(1, 2, 2)
xgb_importance.sort_values(ascending=False).plot(kind='bar', color='blue')
plt.title("XGBoost Feature Importance")
plt.ylabel("Importance Score")

plt.tight_layout()
plt.show()